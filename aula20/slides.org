#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 999
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h2>%s</h2><h3>%A %a</h3>
#+LATEX_HEADER: \usepackage{proof,latesym,amsmath,amssymb}

#+TITLE: Indecidibilidade
#+SUBTITLE: PCC102 - Teoria da computação
#+AUTHOR: Rodrigo Ribeiro
#+EMAIL: rodrigo.ribeiro@ufop.edu.br

* Objetivos

- Apresentar a indecidibilidade do problema de determinar se um termo possui forma
  normal.

* Motivação

- Normalmente, o estudo de decidibilidade inicia-se por apresentar a definição
  de máquinas de Turing e o problema da parada.

- Adotaremos uma abordagem diferente, usaremos o \lambda cálculo como formalismo base.

* Motivação

- Mas, essas provas são equivalentes?
  - Sim! Note que podemos construir um \lambda-termo cuja computação simula as configurações
    de uma máquina de Turing.
  - Logo, o termo possui forma normal só se a sequência de configurações da máquina de Turing
    é finita.

* Definições

- Antes de apresentar a demonstração, devemos introduzir algumas noções.

* Definições

- Vamos supor um algoritmo para codificar termos por um único número natural.

- Denotaremos esse número por gd(e), o número de Gödel do termo e.

* Definições

- Intuitivamente, a codificação é feita da seguinte forma:

  - A cada símbolo da linguagem, atribuímos um número primo $p_i$.

  - O código de um termo consiste no produto dos primos correspondentes
    a cada símbolo.

* Definições

- A função gd(e) é injetora, isto é, atribui para termos sintaticamente diferentes
  diferentes códigos.

* Definições

- Supomos uma função recursiva e total \tau que satisfaz:

\begin{array}{l}
  \forall e_1\:e_2. \tau(gd(e_1),gd(e_2)) = gd(e_1\:e_2)\\
\end{array}

* Definições

- Supomos uma função recursiva e total \nu que satisfaz:
  - $\overline{n}$ denota o termo correspondente a $n\in\mathbb{N}$

\begin{array}{l}
  \nu(n) = gd(\overline{n})\\
\end{array}

* Definições

- O código correspondente ao número de Gödel de um termo e:

\begin{array}{l}
  \lceil e \rceil = \overline{gd(e)}
\end{array}

* Definições

- Considere que gd(ee') = 3. Então, temos que:

\begin{array}{l}
  \lceil ee' \rceil = \\
  \overline{gd(ee')} = \\
  \overline{3} = \\
  \lambda s\,z.s\,(s\,(s\,z))\\
\end{array}

* Definições

- Dizemos que dois conjuntos $\mathcal{A}\subseteq\mathbb{N}$ e
  $\mathcal{B}\subseteq\mathbb{N}$ são recursivamente separáveis se
  existe uma função total recursiva \phi tal que:

  - Se $n \in \mathcal{A}$ então $\phi(n) = 0$
  - Se $n \in \mathcal{B}$ então $\phi(n) = 1$

* Definições

- Conjuntos de termos são recursivamente separáveis se seus respectivos
  conjuntos de códigos de Gödel o são.

* Definições

- Dizemos que um conjunto $\mathcal{A}\subseteq\mathbb{N}$ é decidível
  se $\mathcal{A}$ e seu complemento são recursivamente separáveis.

* Definições

- Toda função recursiva total pode ser representada por um \lambda-termo.

* Definições

- Um conjunto de termos $\mathcal{A}$ é dito ser fechado com respeito a
  $\equiv_{\beta}$ se:

\begin{array}{l}
   e \in \mathcal{A} \land e' \equiv_{\beta} e \to e' \in \mathcal{A}
\end{array}

* Indecidibilidade

- Não existem conjuntos de termos fechados com respeito a $\equiv_{\beta}$
  recursivamente separáveis.

* Indecidibilidade

- Como a relação $\equiv_{\beta}$ relaciona termos que reduzem entre si,
  podemos mostrar que um conjunto de termos e suas formas normais não
  são recursivamente separáveis.
  - Consequência: indecidível se um termo possui ou não forma normal.

* Indecidibilidade

- *Prova:* Suponha A e B dois conjuntos fechados não vazios de termos.

* Indecidibilidade

- Suponha, por contradição, que exista uma função recursiva total \phi que separa A e B.

  - $e \in A \Rightarrow \phi(gd(e)) = 0$
  - $e \in B \Rightarrow \phi(gd(e)) = 1$

* Indecidibilidade

- Como \phi é recursiva total, existe um \lambda-termo F que denota \phi.

* Indecidibilidade

- Dessa forma, temos que:

  - $e \in A \Rightarrow F(\lceil e \rceil) \equiv_\beta \overline{0}$
  - $e \in B \Rightarrow F(\lceil e \rceil) \equiv_\beta \overline{1}$

* Indecidibilidade

- Sejam $e_1 \in A$, $e_2 \in B$ termos quaisquer.

- Vamos construir um termo $J$ tal que:

\begin{array}{l}
  F(\lceil J \rceil) = \overline{0} \Rightarrow J \equiv_{\beta} e_{2}\\
  F(\lceil J \rceil) = \overline{1} \Rightarrow J \equiv_{\beta} e_{1}\\
\end{array}

* Indecidibilidade

- O termo $J$ é tal que
  - Se $J \in A$ então $F(\lceil J \rceil) \equiv_\beta \overline{1}$.
  - Se $J \in B$ então $F(\lceil J \rceil) \equiv_\beta \overline{0}$.

* Indecidibilidade

- Construção de $J$.
  - Seja $K = \lambda x\,y.x$
  - Seja $D = \lambda x\,y\,z.z (K\:y)\,x$
  - Seja $T$ o termo correspondente a função $\phi$.
  - Seja $N$ o termo correspondente a função $\nu$.

* Indecidibilidade

- Construção de $J$.
  - Seja $H = \lambda y. D\,B\,A\,(F(T\,y\,(N\:y)))$
- O termo $J = H \lceil H \rceil$

* Indecidibilidade

- Seja $j = gd(J)$. Temos que $\phi(j) = 0 \lor \phi(j) = 1$.

* Indecidibilidade

- Caso $\phi(j) = 0$:
  - Como $\phi(j) = 0$ e $j = gd(J)$, temos que $F(\lceil J \rceil) \equiv_\beta \overline{0}$.

* Indecidibilidade

- Caso $\phi(j) = 0$:
  - Como $F(\lceil J \rceil) \equiv_\beta \overline{0}$ e $F(\lceil J \rceil) = \overline{0} \Rightarrow J \equiv_{\beta} e_{2}$, temos $J \equiv_{\beta} e_{2}$.

  - Como $J \equiv_{\beta} e_{2}$, $e_2 \in B$ e $B$ é fechado, temos que $J \in B$.

* Indecidibilidade

- Caso $\phi(j) = 0$:
  - Como $J \in B$ e $\forall e. e \in B \Rightarrow \phi(gd(e)) = 1$, então
    $\phi(gd(J)) = 1$.
  - Mas, como $j = gd(J)$, temos que $1 = \phi(gd(J)) = \phi(j) = 0$.
  - Contradição!

* Indecidibilidade

- Caso $\phi(j) = 1$: similar ao caso $\phi(j) = 0$.

* Exercícios

- Existe similaridade entre a prova de indecidibilidade para o \lambda-cálculo e a
  tradicional demonstração para máquinas de Turing? Comente sobre as possíveis similaridades
  e diferenças entre essas formalizações.

* Referências

- Hindley, J. Roger; Seldin, Jonathan P. Lambda-calculus and combinators: An
  introduction. Cambridge.
