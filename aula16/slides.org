#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
#+REVEAL_MARGIN: 0.2
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 999
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h2>%s</h2><h3>%A %a</h3>
#+LATEX_HEADER: \usepackage{proof}

#+TITLE: Relação entre gramáticas livres de contexto e PEGs
#+SUBTITLE: PCC102 - Teoria da computação
#+AUTHOR: Rodrigo Ribeiro
#+EMAIL: rodrigo.ribeiro@ufop.edu.br

* Objetivos

- Apresentar uma semântica operacional para gramáticas livres de contexto.

- Apresentar a relação entre gramáticas LL(1) e PEGs.

* Gramáticas e PEGs

- Qual a relação entre gramáticas livres de contexto e PEGs?

* Gramáticas e PEGs

- No artigo original de PEGs, Ford mostra que PEGs podem reconhecer todas das gramáticas
  livres de contexto determinísticas.

- Porém, a equivalência se restringe a isso?

* Gramáticas e PEGs

- Não! Mascarenhas et.al. mostra a relação de certas classes de linguagens livres de contexto
  e PEGs.

- Consequência: Podemos usar algoritmos para PEGs para reconhecimento de linguagens livres de
  contexto.

* Gramáticas e PEGs

- Para evidenciar essas similaridades, os autores usaram uma semântica operacional para gramáticas
  livres de contexto.

* Semântica de Gramáticas

- Para definir essa semântica, os autores utilizam a sintaxe de parsing expressions para
  a construção de produções em uma gramática livre de contexto.

* Semântica de Gramáticas

- Além disso, os autores consideram que uma gramática é uma tupla $(V,\Sigma,R,p_{s})$, em que:
  - $R$ é uma função entre não terminais e expressões.
  - $p_{s}$ é a expressão inicial da gramática.

* Semântica de Gramáticas

- A semântica de gramáticas é definida pela relação $G[p]\,s\leadsto s'$, em que $G$
  é a gramática, $p$ uma expressão definindo uma produção, $s$ a string de entrada e
  $s'$ o sufixo da entrada não consumido.

* Semântica de Gramáticas

- Semântica para $\lambda$

  \begin{array}{c}
    \dfrac{}{G[\lambda]\,s\leadsto s}
  \end{array}


* Semântica de Gramáticas

- Semântica para $a\in\Sigma$

  \begin{array}{c}
    \dfrac{}{G[a]\,as\leadsto s}
  \end{array}


* Semântica de Gramáticas

- Semântica para $A\in V$

\begin{array}{c}
   \dfrac{G[R(A)]ss'\leadsto s'}{G[A]\,ss'\leadsto s'}
\end{array}

* Semântica de Gramáticas

- Semântica para concatenação

\begin{array}{c}
   \dfrac{G[p]ss's''\leadsto s's''\:\:\:G[p']s's''\leadsto s''}{G[p\,p']\leadsto s''}
\end{array}

* Semântica de Gramáticas

- Semântica para escolha

\begin{array}{c}
   \dfrac{G[p]ss'\leadsto s'}{G[p\,|\,p']\leadsto s'}
\end{array}


* Semântica de Gramáticas

- Semântica para escolha

\begin{array}{c}
   \dfrac{G[p']ss'\leadsto s'}{G[p\,|\,p']\leadsto s'}
\end{array}

* Semântica de Gramáticas

- Teorema: Se $G[p']ss'\leadsto s'$ então para todo $s''$ temos que $G[p']ss''\leadsto s''$.

- Prova: Indução na derivação de $G[p']ss'\leadsto s'$.

* Semântica de Gramáticas

- A semântica apresentada é muito similar à semântica para PEGs.

- Diferenças principais:
  - Escolha não determinística explícita na sintaxe de expressões.
  - Ausência do operador de negação.

* Semântica de Gramáticas

- Seria possível adaptar a semântica de PEGs para gramáticas?

- Quais mudanças seriam necessárias?

* Semântica de Gramáticas

- Quais mudanças seriam necessárias?
  - Regras para escolha ordenada.
  - Falhas explícitas


* Semântica de PEG para Gramáticas

- Semântica para $\lambda$

  \begin{array}{c}
    \dfrac{}{G[\lambda]\,s\leadsto_{PEG} s}
  \end{array}


* Semântica de PEG para Gramáticas

- Semântica para $a\in\Sigma$

  \begin{array}{c}
    \dfrac{}{G[a]\,as\leadsto_{PEG} s}
  \end{array}


* Semântica de PEG para Gramáticas

- Semântica para $a\in\Sigma$

  \begin{array}{c}
    \dfrac{a\neq b}{G[a]\,bs\leadsto_{PEG} \bot}
  \end{array}


* Semântica de PEG para Gramáticas

- Semântica para $a\in\Sigma$

  \begin{array}{c}
    \dfrac{}{G[a]\,\lambda\leadsto_{PEG} \bot}
  \end{array}


* Semântica de PEG para Gramáticas

- Semântica para $A\in V$

\begin{array}{c}
   \dfrac{G[R(A)]ss'\leadsto_{PEG} X}{G[A]\,ss'\leadsto_{PEG} X}
\end{array}


* Semântica de PEG para Gramáticas

- Semântica para concatenação

\begin{array}{c}
 \dfrac{G[p]ss's''\leadsto_{PEG} s's''\:\:\:G[p']s's''\leadsto_{PEG} s''}{G[p\,p']\leadsto_{PEG} s''}
\end{array}


* Semântica de PEG para Gramáticas

- Semântica para concatenação

\begin{array}{c}
   \dfrac{G[p]s\leadsto_{PEG} \bot}{G[p\,p']\leadsto_{PEG} \bot}
\end{array}


* Semântica de PEG para Gramáticas

- Semântica para concatenação

\begin{array}{c}
   \dfrac{G[p]ss's''\leadsto_{PEG} s'\:\:\:G[p']s'\leadsto_{PEG} \bot}{G[p\,p']\leadsto_{PEG} \bot}
\end{array}


* Semântica de PEG para Gramáticas

- Semântica para escolha

\begin{array}{c}
   \dfrac{G[p]ss'\leadsto_{PEG} s'}{G[p\,|\,p']\leadsto_{PEG} s'}
\end{array}


* Semântica de PEG para Gramáticas

- Semântica para escolha

\begin{array}{c}
   \dfrac{G[p]ss'\leadsto_{PEG} \bot \:\:\: G[p']ss'\leadsto_{PEG} X}{G[p\,|\,p']\leadsto_{PEG} X}
\end{array}

* Semântica de PEG para Gramáticas

- Teorema: Se $G[p]ss'\leadsto_{PEG} s'$ então $G[p]ss' \leadsto s'$.

- Prova: Por indução sobre a derivação de $G[p]ss'\leadsto_{PEG} s'$.

* Semântica de PEG para Gramáticas

- Teorema: Se $G[p]s\leadsto_{PEG} X$ e $G[p]s \leadsto_{PEG} X'$ então $X = X'$.

- Prova: Por indução sobre a derivação de $G[p]s\leadsto_{PEG} X$.

* Gramáticas LL(1) e PEGs

- Uma gramática sem expressões $\lambda$ é LL(1) se, e somente se, os
  conjuntos $first$ de cada um de seus não terminais $A_i$ são disjuntos.

\begin{array}{c}
  first^{G}(p) = \{a \in \Sigma\,|\,G[p] axy \leadsto y\}
\end{array}

* Gramáticas LL(1) e PEGs

- Uma gramática é LL(1) se todo operador de escolha $p_1\,|\,p_2$ é tal que
  $first^G(p_1)\cap first^G(p_2) = \emptyset$.

- Gramáticas com essa propriedade podem ser interpretadas como PEGs preservando
  a linguagem reconhecida.

* Gramáticas LL(1) e PEGs

- Para gramáticas que possuem expressões $\lambda$, algumas propriedades adicionais
  fazem-se necessárias.

* Gramáticas LL(1) e PEGs

- Estrutura BNF: Uma gramática $(V,\Sigma,R,p_{S})$ possui estrutura BNF se:
  - Não ocorrem escolhas como sub-expressões de uma concatenação.
  - $p_{S}$ é um não terminal da gramática.
  - Para toda escolha $p_1\,|\,p_2$ se $p_1$ aceita a string vazia então $p_2$
    também deve aceitar.

* Gramáticas LL(1) e PEGs

- Atualizando a definição de $first$:

  \begin{array}{lcl}
     first^{G}(p) & = & \{a \in \Sigma \,|\, G[p] axy \leadsto y\} \cup nullable(p)\\
     nullable(p)  & = & \{\lambda\}\:\:\text{, se } G[p]s\leadsto s\\
     nullable(p)  & = & \emptyset\:\:\text{, caso contrário}\\
  \end{array}

* Gramáticas LL(1) e PEGs

- Como a gramática possui expressões que podem não consumir nenhum símbolo da entrada,
  devemos considerar o conjunto $follow$:

  \begin{array}{lcl}
    follow^{G}(A) & = & \{a \in\Sigma\cup\{\$\}\,|\, G[A]yaz\leadsto az\text{ em }
          G[A]\,w\$\leadsto\$\}
  \end{array}

* Gramáticas LL(1) e PEGs

- Gramáticas que possuem expressões que não consomem nenhum símbolo da entrada são LL(1) se
  para toda produção $A \to p$ e toda escolha $p_1\,|\,p_2$ de $p$:
  - $first^{G}(p_1)\cap first^{G}(p_2) = \emptyset$
  - Se $\lambda \in first^{G}(p_2)$ então $first^{G}(p_1) \cap follow^{G}(p_2) = \emptyset$

* Gramáticas LL(1) e PEGs

- Logo, gramáticas que atendem as condições anteriores podem ser intepretadas como PEGs e,
  portanto, executadas usando intepretadores para tal formalismo.

* Gramáticas e PEGs

- Outras classes de gramáticas possuem equivalências com PEGs: strong LL(k), right-linear e
  LL-regular.

* Exercícios

- Apresente uma prova detalhada do seguinte teorema.

- Se $G[p]ss'\leadsto_{PEG} s'$ então $G[p]ss' \leadsto s'$.

* Referências

- Mascarenhas, Fábio; Medeiros, Sérgio; Ierusalimschy, Roberto.
  On the relation between context-free grammars and parsing expression grammars.
  Science of computer programming.
